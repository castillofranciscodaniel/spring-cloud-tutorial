package com.springboot.app.items.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;
import com.springboot.app.items.models.Item;
import com.springboot.app.items.models.Product;
import com.springboot.app.items.service.ItemService;

import lombok.NonNull;
import lombok.extern.log4j.Log4j2;

@RestController
@RequestMapping(value = "", name = "itemController", produces = MediaType.APPLICATION_JSON_VALUE)
// @RequiredArgsConstructor(onConstructor = @__(@Inject))

@Log4j2
public class ItemController {

	@NonNull private ItemService itemService;

	@Value("${config.text}")
	private String text;

	@Autowired
	ItemController(ItemService itemService) {
		this.itemService = itemService;
	}

	@GetMapping(name = "list")
	public ResponseEntity<List<Item>> list() {
		return ResponseEntity.ok(this.itemService.findAll());
	}

	@GetMapping(params = "find=ByProductId")
	public ResponseEntity<Item> findByProductId(@RequestParam("productId") Long productId) {
		return ResponseEntity.ok(this.itemService.findByProductId(productId));
	}

	@HystrixCommand(fallbackMethod = "alternativeMethod")
	@GetMapping(params = "find=ByProductIdAndAmount")
	public ResponseEntity<Item> findByProductIdAndAmount(
			@RequestParam("productId") Long productId,
			@RequestParam("amount") Integer amount) {
		return ResponseEntity.ok(this.itemService.findByProductIdAndAmount(productId, amount));
	}

	public ResponseEntity<Item> alternativeMethod(@RequestParam("productId") Long productId,
			@RequestParam("amount") Integer amount) {
		Product product = new Product();
		product.setId(productId);
		product.setName("Camara Sony");
		product.setPrice(500.00);
		Item item = new Item(product, amount);
		return ResponseEntity.ok(item);
	}

	@GetMapping(path = "getConfig")
	public ResponseEntity<Map<String, String>> getConfig(@Value("${server.port}") String port) {

		log.info("text: {}, port: {}", this.text, port);

		Map<String, String> map = new HashMap<>();
		map.put("text", this.text);
		map.put("puerto", port);
		return ResponseEntity.ok(map);
	}

}
